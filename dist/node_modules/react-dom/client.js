(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.client = global.client || {}, global.client.js = factory()));
})(this, (function () { 'use strict';

	const FunctionComponent = 0;
	const HostRoot = 3; //根节点
	const HostComponent = 5; //例如<div/>
	const HostText = 6; //div中的文本

	const NoFlags = 0b0000000;
	//属性相关
	const Update = 0b0000010;
	//结构相关
	const ChildDeletion = 0b0000100;
	const Placement = 0b0000001;
	const MutationMask = Placement | Update | ChildDeletion;

	class FiberNode {
	    //组件的类型。对于函数组件，它是一个函数；对于类组件，它是一个类；
	    //对于 DOM 元素，它是一个字符串（如 'div' 或 'span'）
	    type;
	    // 表示 Fiber 节点的类型标记。它指示 Fiber 是表示什么类型的组件
	    //（例如，FunctionComponent、ClassComponent、HostComponent 等）
	    tag;
	    //该 Fiber 节点即将接收到的 props。这些是还没有应用到 DOM 或组件实例上的 props
	    pendingProps;
	    // Fiber 节点在其兄弟节点中的唯一标识符
	    key;
	    //对应于真实的 DOM 节点（对于 HostComponent 类型的 Fiber），或者组件实例（对于类组件类型的 Fiber）
	    stateNode;
	    //fiber父节点
	    return;
	    //兄弟
	    sibling;
	    //孩子
	    child;
	    //对应于该 Fiber 节点的 ref。用于访问组件或 DOM 节点的引用
	    ref;
	    // 在当前 Fiber 的子节点中的索引位置。用于跟踪当前节点在兄弟节点中的位置
	    index;
	    //上一次渲染中已经应用的 props。用于比较当前 props 是否发生变化，从而决定是否需要重新渲染
	    memoizedProps;
	    //上一次渲染中已经应用的状态。用于比较当前状态是否发生变化
	    memoizedState;
	    //切换两棵树
	    alternate;
	    //这个 Fiber 节点的标志位，用于表示 Fiber 节点的状态和需要执行的操作。例如，它可以表示是否需要更新、插入或删除节点。
	    flags;
	    //子冒泡上来的flags，用于性能优化看是否需要更新
	    subtreeFlags;
	    //与 Fiber 节点相关的更新队列。用于存储需要应用到 Fiber 的更新，例如 state 更新。这通常是一个待处理的更新集合。
	    updateQueue;
	    constructor(tag, pendingProps, key) {
	        //实例属性
	        this.tag = tag;
	        this.key = key || null;
	        //其对应的DOM
	        this.stateNode = null;
	        //FiberNode类型
	        this.type = null;
	        //父级FiberNode
	        this.return = null;
	        //右边的兄弟FiberNode
	        this.sibling = null;
	        //子FiberNode
	        this.child = null;
	        //当前同级的位置索引
	        this.index = 0;
	        this.ref = null;
	        //工作单元
	        this.pendingProps = pendingProps; //begin
	        this.memoizedProps = null; //end
	        this.updateQueue = null;
	        this.alternate = null;
	        //副作用
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	    }
	}
	//表示一个 Fiber 树的根节点
	class FiberRootNode {
	    //表示实际的 DOM 容器，如一个 HTML 元素，React 将组件渲染到这个容器中
	    container;
	    //hostRootFiber 是根 Fiber 节点，它将被设置为 current 属性
	    current;
	    finishedWork;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	//创建workInProgress,目前不是很懂
	const createWorkInProgress = (current, pendingProps) => {
	    let wip = current.alternate;
	    if (wip === null) {
	        //mount
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.tag = current.tag;
	        wip.stateNode = current.stateNode;
	        current.alternate = wip;
	        wip.alternate = current;
	    }
	    else {
	        //update
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedState = current.memoizedState;
	    wip.memoizedProps = current.memoizedProps;
	    wip.ref = current.ref;
	    return wip;
	};
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        // <div/> type: 'div'
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('为定义的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}

	//创建单个跟新
	const createUpdate = (action) => {
	    return {
	        action,
	        next: null
	    };
	};
	//创建更新池子
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        },
	        dispatch: null
	    };
	};
	//将更新插入
	const enqueueUpdate = (updateQueue, update) => {
	    const pedding = updateQueue.shared.pending;
	    //当有新更新插入时，它会被插入到队列的末尾。由于队列是环状的，新更新的 next 指向队列的第一个更新，而队列中最后一个更新的 next 更新为新插入的更新，形成一个闭环。这样，队列的循环结构得以维持。
	    if (pedding === null) {
	        update.next = update;
	    }
	    else {
	        update.next = pedding.next;
	        pedding.next = update;
	    }
	    updateQueue.shared.pending = update;
	};
	///尚未完成，写了个大概，消费update的
	const processUpdateQueue = (baseState, pendingUpdate) => {
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        if (action instanceof Function) {
	            result.memoizedState = action(baseState);
	        }
	        else {
	            result.memoizedState = action;
	        }
	    }
	    return result;
	};

	const isSupportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = isSupportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	function ChildReconciler(shouldTrackEffects) {
	    function placeSingleChild(fiber) {
	        //首屏渲染
	        if (shouldTrackEffects && fiber.alternate === null) {
	            //增加placement标记
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    function reconcileSingleElement(returnFiber, currentFiber, element) {
	        // 根据element创建fiber
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的reconcile类型', newChild);
	                    }
	                    break;
	            }
	        }
	        // HostText
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        {
	            console.warn('未实现的reconcile类型', newChild);
	        }
	        return null;
	    };
	}
	const reconcileChildFibers = ChildReconciler(true);
	const mountChildFibers = ChildReconciler(false);

	const beginWork = (wip) => {
	    switch (wip.tag) {
	        case HostRoot:
	            return updateHostRoot(wip);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case HostText:
	            return null;
	        // case FunctionComponent:
	        // 	return updateFunctionComponent(wip);
	        default:
	            {
	                console.warn('workloop未实现的类型', wip);
	            }
	            break;
	    }
	    return null;
	};
	function updateHostRoot(wip) {
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pedding = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    const { memoizedState } = processUpdateQueue(baseState, pedding);
	    wip.memoizedState = memoizedState;
	    const nextChildren = wip.memoizedState;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	//无法触发更新
	function updateHostComponent(wip) {
	    //<div><span/></div> span在div的props的children
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function reconcileChildren(wip, children) {
	    const current = wip.alternate;
	    if (current !== null) {
	        //update
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        //mount
	        wip.child = mountChildFibers(wip, null, children);
	    }
	}
	//性能优化，构建离屏dom树，childFibers，针对mount流程

	// export const createInstance = (type: string, props: any): Instance => {
	const createInstance = (type) => {
	    // TODO 处理props
	    const element = document.createElement(type);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;

	let nextEffect = null;
	const commitMutationEffects = (finishedWork) => {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags && child !== null) {
	            nextEffect = child;
	        }
	        else {
	            up: while (nextEffect !== null) {
	                commitMutaitonEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up; //进入上面的while
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutaitonEffectsOnFiber = (finishedWork) => {
	    const flags = finishedWork.flags;
	    // flags placement
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        //删除placement
	        finishedWork.flags &= ~Placement;
	    }
	    // flags Update
	    // flags ChildDeletion
	};
	const commitPlacement = (finishedWork) => {
	    {
	        console.warn('执行Placement操作', finishedWork);
	    }
	    //找到要插入节点的父亲
	    const hostParent = getHostParent(finishedWork);
	    if (hostParent !== null) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	};
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        // HostComponent HostRoot
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('未找到host parent');
	    }
	    return null;
	}
	function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        appendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            appendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}

	const completeWork = (wip) => {
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            if (current !== null && wip.alternate) ;
	            else {
	                // const instance = createInstance(wip.type, newProps);
	                const instance = createInstance(wip.type);
	                // 2. 将DOM插入到DOM树中
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            return null;
	        case HostText:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // 1. 构建DOM
	                const instance = createTextInstance(newProps.content);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('未处理的completeWork情况', wip);
	            }
	            break;
	    }
	};
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}
	//递归的插子dom树，流程为深度遍历
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    while (node !== null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === wip) {
	            return;
	        }
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            node = node?.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}

	//当前正在工作的FiberNode
	let workInprogress;
	//初始化 Fiber 渲染,根
	function prepareFreshStack(root) {
	    workInprogress = createWorkInProgress(root.current, {});
	}
	//启动渲染过程
	function renderRoot(root) {
	    prepareFreshStack(root);
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (e) {
	            {
	                console.warn("workLoop error", e);
	                workInprogress = null;
	            }
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    commitRoot(root);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork; //指针指向完成树的开始
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn('commit阶段开始', finishedWork);
	    }
	    // 重置
	    root.finishedWork = null;
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        commitMutationEffects(finishedWork);
	        root.current = finishedWork;
	    }
	    else {
	        root.current = finishedWork;
	    }
	}
	//循环处理所有待完成的 Fiber 节点,递归
	function workLoop() {
	    while (workInprogress != null) {
	        performUnitOfWork(workInprogress);
	    }
	}
	///向下遍历
	function performUnitOfWork(fiber) {
	    const next = beginWork(fiber);
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next === null) {
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInprogress = next;
	    }
	}
	//向上遍历
	function completeUnitOfWork(fiber) {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInprogress = sibling;
	            return;
	        }
	        node = node.return;
	        workInprogress = node;
	    } while (node !== null);
	}
	function scheduleUpdateOnFiber(fiber) {
	    const root = markUpdateFromFiberToRoot(fiber);
	    renderRoot(root);
	}
	//向上遍历到根节点
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}

	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	}

	function createRoot(container) {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
